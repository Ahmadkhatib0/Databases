Security
  Access to PostgreSQL is controllable via host-based access rules. Authentication is flexible and pluggable, 
  allowing for easy integration with any external security architecture. The latest Salt-ed Challenge Response 
  Authentication Mechanism (SCRAM) provides full 256-bit protection.

PostgreSQL 16 can achieve significantly more than 1,000,000 reads per second on a 4-socket server, and it 
  benchmarks at more than 50,000 write transactions per second with full durability, depending upon your 
  hardware. With advanced hardware, even higher levels of performance are possible.
  
PostgreSQL provides multi-node read scalability using the Hot Standby feature. Transparent multi-node write 
  scalability is under active development. The starting point for this is EDB Postgres Distributed 
  (formerly Bi-directional replication) as it allows transparent and efficient synchronization of reference 
  data across multiple servers. Other forms of write scalability have existed for more than a decade, 
  starting from the PL/Proxy language, Greenplum and Citus.

== host   all     all     0.0.0.0/0        scram-sha-256 
   The following are the parameters required for SCRAM-SHA-256-encrypted passwords:
   1- Type: For this, host means a remote connection.
   2- Database: For this, all means for all databases. Other names match exactly, except when prefixed with a
      plus (+) symbol, in which case we mean a group role rather than a single user. You can also specify a 
      comma-separated list of users or use the @ symbol to include a file with a list of users. You can even 
      specify sameuser so that the rule matches when you specify the same name for the user and database.
   3- User: For this, all means for all users. Other names match exactly, except when prefixed with a plus 
      (+) symbol, in which case we mean a group role rather than a single user. You can also specify a 
      comma-separated list of users, or use the @ symbol to include a file with a list of users.
   4- CIDR-ADDRESS : This consists of two parts: an IP address and a subnet mask. The subnet mask is specified 
      as the number of leading bits of the IP address that make up the mask. Thus, /0 means 0 bits of the IP 
      address so that all IP addresses will be matched. For example, 192.168.0.0/24 would mean matching the 
      first 24 bits, so any IP address of the 192.168.0.x form would match. You can also use samenet or samehost.
   5- Method: For this, scram-sha-256 means that PostgreSQL will ask the client to provide a password encrypted 
      with SCRAM-SHA-256. A common choice is peer, which is enabled by default and described in the There’s 
      more... section of this recipe. Another common (and discouraged!) setting is trust, which effectively means 
      no authentication. Other authentication methods include GSSAPI, SSPI, LDAP, RADIUS, and PAM. PostgreSQL
      connections can also be made using SSL, in which case client SSL certificates provide authentication. 
      See the Using SSL certificates to authenticate the client recipe in Chapter 6, Security, for more details.

╒═══════════════════════════════════════════════════════════════════════════════════════════════════╕
  When using a Unix socket connection, the client is another process running on the same host;      
  therefore, Postgres can reliably get the OS username under which the client is running. The logic 
  of peer authentication is to allow a connection attempt if the client’s OS username is identical  
  to the database username being used for the connection. Hence, if there is a database user with   
  exactly the same name as an OS user, then that user can benefit from password-less authentication 
└───────────────────────────────────────────────────────────────────────────────────────────────────┘

There are two types of help commands, which are as follows:
• \?: This provides help on psql meta-commands.
• \h: This provides help on specific SQL commands.

Check out some other useful features of psql, which are as follows:
• Informational metacommands, such as \d, \dn, and more
• Formatting, for output, such as \x
• Execution timing using the \timing command
• Input/output and editing commands, such as \copy, \i, and \o
• Automatic startup files, such as .psqlrc
• Substitutable parameters (variables), such as \set and \unset
• Access to the OS command line using \!
• Crosstab views with \crosstabview
• Conditional execution, such as \if, \elif, \else, and \endif


== The following are the system’s default data directory locations:
  • Debian or Ubuntu systems: /var/lib/postgresql/MAJOR_RELEASE/main
  • Red Hat RHEL, CentOS, and Fedora: /var/lib/pgsql/data/
  • Systems deployed with Trusted Postgres Architect (TPA): /opt/postgres/data
  • Windows: C:\Program Files\PostgreSQL\MAJOR_RELEASE\data

== pg_lsclusters is part of the postgresql-common Debian/Ubuntu package, which provides a structure under which 
   multiple versions of PostgreSQL can be installed, and multiple clusters can be maintained, at the same time.

== The following are the default server log locations:
   1- Debian or Ubuntu systems: /var/log/postgresql
   2- Red Hat, RHEL, CentOS, and Fedora: /var/lib/pgsql/data/pg_log
   3- System deployed with TPA: Messages are sent to syslog, and to /var/log/postgres/postgres.log
   4- Windows systems: The messages are sent to the Windows Event Log
 
== if you want to place certain schemas and tables in every new database, you can place them in template1 so that you 
   don’t have to create them again every time you create a new database. The template0 database exists so that, when you 
   alter template1, you still have a pristine copy to fall back on. In other words, if you break template1, then you can
   drop it and recreate it from template0.

== PostgreSQL stores information about the database in catalog tables. They describe every aspect of the way the 
   database has been defined. There is a main set of catalog tables stored in a schema, called pg_catalog. There 
   is a second set of catalog objects called the information schema, which is the standard SQL way of accessing 
   information in a relational database.

== Table partitions are implemented as standard tables, which are then considered as part of a larger
   table, so you might want to exclude them from the total count of tables, i.e., you might prefer
   that a table with 100 partitions is counted as 1 table instead of 101 tables. However, doing that is
   more complicated. The information schema shows partitions as the same as tables, which is true
   for PostgreSQL, so it is somewhat misleading. So what we want to do is exclude tables that are
   also partitions. Partitions are marked in the pg_catalog.pg_class table, with a Boolean column
   of relispartition. If we use pg_class, we also need to exclude non-tables and ensure we don’t
   include internal schemas
 
== PostgreSQL uses memory in a dynamic way across its databases, which is why the question
   includes the word “currently.” By this, we mean that the shared buffers managed by a database
   server are used concurrently by all its databases. This is based on demand, so if a database is un-
   used, then the amount of memory it uses will decrease, because the same memory will gradually
   be reused to cache data files from busier databases.
 
== By default, PostgreSQL uses blocks whose size is 8 KB = 8,192 bytes, but the users could have
   initialized their instance with a different block size, which is why it is safer to write current_
   setting('block_size') instead of just 8192.

 ╒════════════════════════════════════════════════════════════════════════════════════════════════════════╕
  In PostgreSQL, a table is made up of many relations. The main relation is the data table. In addition, 
  there are a variety of additional data files. Each index created on a table is also a relation. Long   
  data values are placed in a secondary table named TOAST, which is an acronym for The Oversize          
  Attribute Storage Technique; in most cases, each table also has a TOAST table and a TOAST index.       
  Each relation consists of multiple data files. The main data files are broken into 1 GB pieces. The    
  first file has no suffix; others have a numbered suffix (such as .2). There are also files marked _vm  
  and _fsm, which represent the Visibility Map and Free Space Map, respectively. They are used as        
  part of maintenance operations. They stay fairly small, even for very large tables.                    
 └────────────────────────────────────────────────────────────────────────────────────────────────────────┘

== You may also see files ending in _init; they are used by unlogged tables and their indexes, to restore 
   them after a crash. Unlogged objects are called this way because they do not produce any write-ahead log 
   (WAL for short), the PostgreSQL mechanism to ensure consistent crash recovery. So they support faster 
   writes, but in the event of a crash they must be truncated, that is, restored to an empty state.

== MVCC requires us to record information on each row of a table, stating when each change was
   made. If the changes were made after the SQL statement began to execute, then we just ignore
   those changes. This means that we need to carry out visibility checks on each row in the table
   to allow us to work out the results of the count SQL statement. The optimization provided by
   index-only scans is the ability to skip such checks on the table blocks that are already known to
   be visible to all current sessions. Rows in these blocks can be counted directly in the index, which
   is normally smaller than the table and is, therefore, faster.

 ╒═══════════════════════════════════════════════════════════════════════════════════════════════════════════════╕
  == Object identifiers (OIDs) are used internally by PostgreSQL as primary keys for various system tables.     
     Type oid represents an object identifier. There are also several alias types for oid, each named regsomething 
  == Casting to regclass is a shortcut way of saying "this the name of a relation, please convert it to the     
     oid of that relation". Casts to regclass are aware of the search_path, unlike querying pg_class for a         
     relation's oid directly,                                                                                      
  == VACUUM maintenance process. When that process runs against a table in Postgres, we record two pieces of 
     information in the pg_class catalog entry for the table. These two items are the number of data blocks in 
     the table (relpages) and the number of rows in the table (reltuples). Some people think they can use the 
     value of reltuples in pg_class as an estimate, but it could be severely out of date. You will also be fooled
     if you use information in another table named pg_stat_user_tables
  == The Postgres optimizer uses the relpages and reltuples values to calculate the average rows
     per block, which is also known as the average tuple density.
 └───────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

== To get an idea of which extensions are available, you can browse the list of additional modules
   shipped together with PostgreSQL, which are almost all extensions, at:  /docs/current/static/contrib.html



== PostgreSQL documents are written in Standard Generalized Markup Language (SGML), which
   is similar to, but not the same as, Extensible Markup Language (XML). These files are then pro-
   cessed to generate HyperText Markup Language (HTML) files, PDFs, and so on. This ensures that
   all the formats have exactly the same content. Then, you can choose the format you prefer,


== Planning a new database: 
--   Database design – plan your database design.
--   Calculate the initial database sizing.
--   Transaction analysis – how will we access the database?
--   Look at the most frequent access paths (for example, queries).
--   What are the requirements for the response times?
--   Hardware specification (which is still needed in the cloud).
--   Initial performance thoughts – will all of the data fit into the available Random-Access Memory (RAM)?
--   Choose the Operating System (OS) and filesystem types.
--   Create a localization plan.
--   Decide the server encoding, locale, and time zone.
--   Access and security administration plan.
--   Identify client systems and specify the required drivers.
--   Create roles according to a plan for access control.
--   Specify connection routes and authentication for the server in pg_hba.conf.
--   Monitoring – are there PostgreSQL plugins for the monitoring solution you are already
--   using (usually, the answer is yes)? What are the business-specific metrics we need to monitor?
--   Maintenance plan – who will keep it working? How?
--   Availability plan – consider the availability requirements.
--   If you are working with a cloud database cluster, you should also consider the following:
          • Plan your backup mechanism and test it.
          • Create a High-Availability (HA) plan.
          • Decide which form of replication you’ll need – if any.
--   If you are going to deploy on Kubernetes, plenty of these things will be managed by the
     operator, but you still need to think about:
          • RAM and CPU specs.
          • Sizing for the PVC.
          • Availability, e.g., will the Kubernetes workers be spread across data centers?


== The parameter file, which is known as postgresql.conf, is the main location that’s used to define parameter 
   values for the PostgreSQL server. All the parameters can be set in the parameter file. There are also two 
   other parameter files: pg_hba.conf and pg_ident.conf. Both of these relate to connections and security

 ╒═══════════════════════════════════════════════════════════════════════════════════════════════════╕
                               ALTER SYSTEM SET shared_buffers = '1GB';                                                          
                               
 == This command will not actually edit postgresql.conf. Instead, it writes the new setting to an- 
    other file named postgresql.auto.conf. The effect is equivalent, albeit in a crash-safe way. The  
    original configuration is never written, so it cannot be damaged in the event of a crash. If you  
    mess up with too many ALTER SYSTEM commands, you can always delete postgresql.auto.conf           
    manually and reload the configuration or restart PostgreSQL, depending on which parameters        
    you changed. However, there are no serious checks on values passed to ALTER SYSTEM, so it’s       
    relatively easy to break the configuration of the system and have the server fail to start when the
    server does actually restart – which might be via a different person – sometime later.            
 └───────────────────────────────────────────────────────────────────────────────────────────────────┘

== Setting the configuration parameters in your programs
-- Here are some examples of parameters that are designed to be user-modifiable:
   • application_name – to help identify the session for monitoring
   • synchronous_commit – to set the level of durability desired
   • Various timeouts and check intervals:
        • client_connection_check_interval
        • idle_in_transaction_session_timeout
        • idle_session_timeout
        • lock_timeout
        • statement_timeout
   • Client-tuning parameters:
        • commit_siblings
        • cursor_tuple_fraction
        • maintenance_work_mem
        • vacuum_cost_delay
        • work_mem
   • Data type-specific settings:
        • bytea_output
        • DateStyle
        • xmlbinary
        • xmloption
   • Optimization settings (too many to list, but not normally changed)



== If you want an extension that is not pre-installed, you can choose from a wide range of options
   from a number of sources, such as the following:
-- Contrib: The PostgreSQL core includes many functions. There is also an official section for add-in 
   modules, known as contrib modules. They are always available for your database server but are not 
   automatically enabled in every database, because not all users might need them. In PostgreSQL 16, we 
   have 50 such modules. These are documented at http://www.postgresql.org/docs/current/static/contrib.html.
-- PGXN: This is the PostgreSQL Extension Network, a central distribution system dedicated to sharing 
   PostgreSQL extensions. The website started in 2010 as a repository dedicated to the sharing of extension 
   files. As of October 2023, there were 371 extensions from 410 different authors. You can learn more about 
   it at http://pgxn.org/ 
-- Separate projects: These are large external projects, such as PostGIS, offering extensive
   and complex PostgreSQL modules. For more information, take a look at http://www.postgis.org/.

== PostgreSQL can dynamically load libraries in the following ways:
 • Using the explicit LOAD command in a session
 • Using the shared_preload_libraries parameter in postgresql.conf at the server start
 • At the session start, using the local_preload_libraries parameter for a specific user, as set using ALTER ROLE

== When you issue a CREATE EXTENSION command, the database server looks for a file named EXTNAME.
   control in the SHAREDIR/extension directory. That file tells PostgreSQL some properties of the
   extension, including a description, some installation information, and the default version number
   of the extension (which is unrelated to the PostgreSQL version number). Then, a creation script is
   executed in a single transaction; thus, if it fails, the database is unchanged. The database server
   also notes down the extension name and all the objects that belong to it in a catalog table.

== The use of CASCADE in a CREATE statement only applies to extensions because, for other object
   types, the dependency is not predefined in the object metadata and only exists after creating a
   specific object (for example, a Foreign Key (FK)) 


== pg_ctlcluster 16 main stop -m fast
   Fast mode has been the default since PostgreSQL 9.5 the previous default was to use smart mode,
   meaning we have to wait for all users to finish before we exit. This can take a very long time, 
   and all while new connections are refused.

== Note that for DBAs (Database Administrators) with Oracle experience, immediate mode is the same thing as a 
   shutdown abort. The PostgreSQL immediate mode stop is not the same thing as shutdown immediate on Oracle.

== If you look at the pg_settings catalog table, you’ll see that there is a column named context.
   Each setting has a time and a place where it can be changed. Some parameters can only be reset
   by a server reload, so the value of context for those parameters will be sighup.

== If you want to run multiple physical db on one server, then you have 5 main options:
-- Option 0 (default): Run separate PostgreSQL instances in separate virtual machines on the
   same physical server. This is the default option in cloud systems such as EDB BigAnimal,
   as well as in on-premises deployments such as VMware or Kubernetes-based services.
-- Option 1: Run multiple sets of tables in different schemas in one database of a PostgreSQL
   instance (covered in the Using multiple schemas recipe).
-- Option 2: Run multiple databases in the same PostgreSQL instance (covered in the Giving
   users their own private databases recipe).
-- Option 3: Run multiple PostgreSQL instances on the same virtual/physical system (covered
   in the Running multiple servers on one system recipe).
-- Option 4: Place all the data in one schema and one database but use row-level security
   (RLS) to ensure that users only have access to some subset of the data. This provides
   security but not resource control or convenience.



== Tables can have multiple triggers fired on each event. Triggers are executed in alphabetical order,
   so trigger names should have some kind of action name to differentiate them and to allow the
   order to be specified. It might seem like a good idea to put INSERT, UPDATE, or DELETE in the trigger
   name, but that can get confusing if you have triggers that work on both UPDATE and DELETE, and
   all of this may end up as a mess.
   The alphabetical order for trigger names always follows the C locale, regardless of your actual
   locale settings. If your trigger names use non-ASCII characters, then the actual ordering might
   not be what you expect.
== A useful naming convention for triggers is as follows: {tablename}_{actionname}_{after|before}_trig

╒═══════════════════════════════════════════════════════════════════════════════════════════════════╕
  So, to enforce uniqueness, we need an index and a search operator defined on the data types of    
  the columns. When we define normal UNIQUE constraints, we simply assume that we mean the          
  equality operator (=) for the data type. The EXCLUDE syntax offers a richer syntax to allow us to 
  express the same problem with different data types and operators.                                 
└───────────────────────────────────────────────────────────────────────────────────────────────────┘


== Uniqueness without indexes: 
# To do that, you can do either of the following:
• Use a serial data type.
• Manually alter the default to be the nextval() function of a sequence.
-- ( Consider, also, that this method provides the unique value as a default, 
    which is not used when a user specifies an explicit value. )

== The ANALYZE command works by taking a sample of the table data and then performing a statistical analysis 
   of the results. The n_distinct value (see 05-tables-and-data/Finding a unique key) has two different 
   meanings, depending on its sign: if positive, it is the estimate of the number of distinct values for the 
   column; if negative, it is the estimate of the density of such distinct values, with the sign changed. 
   For example, n_distinct = -0.2 means that a table of 1 million rows is expected to have 200,000 distinct
   values, while n_distinct = 5 means that we expect just 5 distinct values.

== it is reasonably simple to extend PostgreSQL with extra functions or sampling methods, so if you prefer 
   another mechanism, you can find an external random number generator and create a new sampling method 
   for the TABLESAMPLE clause. PostgreSQL includes two extra sampling methods, tsm_system_rows and 
   tsm_system_time, as contrib extensions; they are excellent examples to start with.


== A procedure is similar to a function, except that it doesn’t return any value or object. We use a procedure 
   because it allows you to run multiple server-side transactions. By using procedures in this way, we can 
   break a problem down into a set of smaller transactions that cause less of a problem with database bloat 
   and long-running transactions.

== Two desirable characteristics of partition keys are:
 • They need to have a high enough cardinality, or range of values, for the number of partitions desired.
 • They need to be columns that don’t change often, in order to avoid having to move rows among partitions.

== The MERGE command is a SQL standard way to insert new data into a table, even when new data
   partially overlaps with the existing data.





