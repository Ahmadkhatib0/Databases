---
# Logic Database Name Used for External Services
schemaName: sharding_db

# Actual Data Source in Use
dataSources:
  ds_0:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.jdbc.Driver
    jdbcUrl: jdbc:mysql://localhost:3306/db0
    username: root
    password:

# Specify the Sharding Rule; The example codes means split data tables in
# the database into 4 shards
rules:
  # - !AUTHORITY
  #   users:
  #     - root@%:root
  # Note that % in root@% means that ShardingSphere-Proxy can be connected to
  # via any host address. When nothing follows @, the default value is %. You
  # can also use user1@ localhost to restrict user1 to local logins only
  #     - sharding@:sharding
  #   provider:
  #     type: ALL_PRIVILEGES_PERMITTED

  - !AUTHORITY
    users:
      - root@:root
      - user1@:user1
      - user1@127.0.0.1:user1
    provider:
      type: SCHEMA_PRIVILEGES_PERMITTED
      props:
        user-schema-mappings: root@=test, user1@127.0.0.1=db_dal_admin, user1@=test
  # • When the user root connects to ShardingSphere from any host, they have
  # permission to access the schema named test.
  # • When user1 connects to ShardingSphere from 127.0.0.1, they have the
  # authority to access the schema named db_dal_admin.
  # • When user1 connects to ShardingSphere from any host, they have the right
  # to use the schema named test.

  # When other unauthorized situations occur, any connection will
  # be refused, such as the following:
  # • show databases
  # • use database
  # • select * from database.table
  # Apart from the login scenario, a schema permission check is also
  #  performed when a user enters the following SQL statements:
  # • show databases
  # • use database
  # • select * from database.table

  - !SHARDING
    autoTables:
      t_order:
        actualDataSources: ds_0
        shardingStrategy:
          standard:
            shardingColumn: order_id
            shardingAlgorithmName: t_order_hash_mod
    shardingAlgorithms:
      t_order_hash_mod:
        type: HASH_MOD
        props:
          # split data tables in the database into 4 shards
          sharding-count: 4

  - !ENCRYPT
    encryptors:
      aes_encryptor:
        type: AES
        props:
          aes-key-value: 123456abc
    tables:
      t_user:
        columns:
          pwd:
            cipherColumn: pwd_cipher
            encryptorName: aes_encryptor
